1. Encapsulate what varies
2. Favor composition over inheritance.
3. Program to interfaces, not implementations.
4. Strive for loosely coupled designs between objects that interact.
5. Classes should be open for extension but closed for modification.
6. Depend on abstractions. Do not depend on concrete classes.
7. Talk only to your immediate friends. Invoke methods that belong to:
	a) The object itself
	b) Objects passed in as parameter to the method
	c) Any object the method creates or instantiates
	d) Any component of the object
8. Let the superclasses to call subclasses when needed.
9. A class should have only one reason to change.
