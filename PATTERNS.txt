Strategy - defines a family of algorithms, encapsulates each one,
	and makes them interchangeable. Strategy lets the algorithm
	vary independently from clients that use it.
	
Observer - defines a one-to-many dependency between objects so 
	that when one object changes state, all of its dependents 
	are notified and updated automatically.	
	
Decorator - attaches additional responsibilities to an object
	dynamically. Decorators provide a flexible alternative to
	subclassing for extending functionality.
	
Factory Method - defines an interface for creating an object
	but lets subclasses decide which class to instantiate.
	Factory Method lets a class defer instantiation to subclasses.	
	
Abstract Factory - provides an interface for creating families
	of related or dependent objects without specifying their
	concrete classes.	
	
Singleton - ensures a class has only one instance and provides
	a global point of access to it.
	
Command - encapsulates a request as an object, thereby
	letting you parametrize other objects with different request,
	queue or log requests, and support undoable operations.
	
Adapter - converts the interface of a class into another interface
	the client expects. Adapter lets classes work together that
	couldn't otherwise because of incompatible interfaces.
	Adapter pattern has two forms: 
		a) Object (composition)
		b) Class (multiple inheritance\implementation)
	
Facade - provides a unified interface to a set of interfaces in a 
	subsystem. Facade defines a higher-level interface that makes
	the sybsystem easier to use.	
	
Template Method - defines the skeleton of an algorithm in a method
	deffering some steps to sublasses. Template Method lets subclasses
	redefine certain steps of an algorithm without changing the
	algorithm's structure.
	
Iterator - provides a way to access the elements of an aggregate
	object sequentially without exposing its underlying representation.

Composite - allows you to compose objects into tree structures to
	represent part-whole hierarchies. Composite lets clients treat 
	individual objects and compositins of objects uniformly.	
	
State - allows an object to alter its behaviour when its internal
	state changes. The object will appear to change its class.